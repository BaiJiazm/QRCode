#include "common.h"
#include "funcation.h"

struct Version {
	unsigned char version;
	char *fillString;
};
const Version V[]
{	//版本纠错后位串，可以计算，也可以采用查表方式，本次采用查表
	{ 7,"000111110010010100" },
	{ 8,"001000010110111100" },
	{ 9,"001001101010011001" },
	{ 10,"001010010011010011" },
	{ 11,"001011101111110110" },
	{ 12,"001100011101100010" },
	{ 13,"001101100001000111" },
	{ 14,"001110011000001101" },
	{ 15,"001111100100101000" },
	{ 16,"010000101101111000" },
	{ 17,"010001010001011101" },
	{ 18,"010010101000010111" },
	{ 19,"010011010100110010" },
	{ 20,"010100100110100110" },
	{ 21,"010101011010000011" },
	{ 22,"010110100011001001" },
	{ 23,"010111011111101100" },
	{ 24,"011000111011000100" },
	{ 25,"011001000111100001" },
	{ 26,"011010111110101011" },
	{ 27,"011011000010001110" },
	{ 28,"011100110000011010" },
	{ 29,"011101001100111111" },
	{ 30,"011110110101110101" },
	{ 31,"011111001001010000" },
	{ 32,"100000100111010101" },
	{ 33,"100001011011110000" },
	{ 34,"100010100010111010" },
	{ 35,"100011011110011111" },
	{ 36,"100100101100001011" },
	{ 37,"100101010000101110" },
	{ 38,"100110101001100100" },
	{ 39,"100111010101000001" },
	{ 40,"101000110001101001" }
};

struct Format {
	char Level;
	unsigned char maskPattern;
	char *fillString;
};
const Format F[] = {
	//格式纠错后位串，可以计算，也可以采用查表方式，本次采用查表
	{ 'L',0,"111011111000100" },
	{ 'L',1,"111001011110011" },
	{ 'L',2,"111110110101010" },
	{ 'L',3,"111100010011101" },
	{ 'L',4,"110011000101111" },
	{ 'L',5,"110001100011000" },
	{ 'L',6,"110110001000001" },
	{ 'L',7,"110100101110110" },
	{ 'M',0,"101010000010010" },
	{ 'M',1,"101000100100101" },
	{ 'M',2,"101111001111100" },
	{ 'M',3,"101101101001011" },
	{ 'M',4,"100010111111001" },
	{ 'M',5,"100000011001110" },
	{ 'M',6,"100111110010111" },
	{ 'M',7,"100101010100000" },
	{ 'Q',0,"011010101011111" },
	{ 'Q',1,"011000001101000" },
	{ 'Q',2,"011111100110001" },
	{ 'Q',3,"011101000000110" },
	{ 'Q',4,"010010010110100" },
	{ 'Q',5,"010000110000011" },
	{ 'Q',6,"010111011011010" },
	{ 'Q',7,"010101111101101" },
	{ 'H',0,"001011010001001" },
	{ 'H',1,"001001110111110" },
	{ 'H',2,"001110011100111" },
	{ 'H',3,"001100111010000" },
	{ 'H',4,"000011101100010" },
	{ 'H',5,"000001001010101" },
	{ 'H',6,"000110100001100" },
	{ 'H',7,"000100000111011" }
};

void XORChar(char *s1, char *s2, int len)
{
	for (int i = 0; i < len; i++)
		if (s1[i] == '0')
			s1[i] += s2[i];
		else
			s1[i] -= s2[i];
}
void GenerFormatString(const QRVersion &Q,char *Format,const int &pmode)
{	/* 生成格式信息填充串 可采用查表也可计算，本次采用计算*/
	if (Q.Level == 'L')
		strcpy(Format, "01");
	else if (Q.Level == 'M')
		strcpy(Format, "00");
	else if (Q.Level == 'Q')
		strcpy(Format, "11");
	else if (Q.Level == 'H')
		strcpy(Format, "10");

	ToBit(pmode, Format + 2, 3);

	Format[5] = 0;
	if (strcmp(Format, "00000") == 0)
		strcat(Format, "0000000000");
	else
	{
		char error[50];
		char gener[50] = { 1,0,1,0,0,1,1,0,1,1,1 };
		char *p = error;
		int len;
		strcpy(error, Format);
		strcat(error, "0000000000");
		for (; *p == '0'; p++)
			;
		for (; (len = strlen(p)) > 10;)
		{
			XORChar(p, gener, len);
			for (; *p == '0'; p++)
				;
		}
		strcat(Format, p);
		for (p = Format + strlen(Format); p - Format < 15; p++)
			*p = '0';
		*p = '\0';
	}

	char xorchar[] = { 1,0,1,0,1,0,0,0,0,0,1,0,0,1,0 };
	XORChar(Format, xorchar, 15);
}

/* ************************************
	函数功能：填充格式版本信息
	Q：版本信息		m：二维码矩阵	pmode：掩模方式
*/
void SetFormatVersion(const QRVersion &Q, char(*m)[177],int pmode)
{
	char Format[16] = { "000110100001100" };
//	GenerFormatString(Q, Format, pmode);//采用计算方式
	strcpy(Format, F[VersionLevel * 8 + pmode].fillString);

	int i, j, k;
	for (i = 8, j = 0,k=0; j < Q.SideSize; j++,k++)
	{
		if (j == 6)
			j++;
		else if (j == 8)
			j = Q.SideSize - 7;
		m[i][j] = Format[k] - '0';
	}
	for (i = Q.SideSize-1, j = 8, k = 0; i>=0; i--, k++)
	{
		if (i == Q.SideSize - 8)
			i = 8;
		else if (i == 6)
			i--;
		m[i][j] = Format[k] - '0';
	}

	if (Q.Version >= 7)//采用查表方式
		for (i = 0, k = 17; i < 6; i++)
			for (j = Q.SideSize - 11; j < Q.SideSize - 8; j++)
				m[i][j] = m[j][i] = V[Q.Version - 7].fillString[k--] - '0';
}
