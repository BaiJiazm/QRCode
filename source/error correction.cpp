#include "common.h"

/* “生成多项式”表 */
const unsigned char GenerPolyTable[][31] = {
{ 21,102,238,149,146,229,87,0 },//次数由低到高
{ 45,32,94,64,70,118,61,46,67,251,0 },
{ 78,140,206,218,130,104,106,100,86,100,176,152,74,0 },
{ 105,99,5,124,140,237,58,58,51,37,202,91,61,183,8,0 },
{ 120,225,194,182,169,147,191,91,3,76,161,102,109,107,104,120,0 },
{ 136,163,243,39,150,99,24,147,214,206,123,239,43,78,206,139,43,0 },
{ 153,96,98,5,179,252,148,152,187,79,170,118,97,184,94,158,234,215,0 },
{ 190,188,212,212,164,156,239,83,225,221,180,202,187,26,163,61,50,79,60,17,0 },
{ 231,165,105,160,134,219,80,98,172,8,74,200,53,221,109,14,230,93,242,247,171,210,0 },
{ 21,227,96,87,232,117,1,111,218,228,226,192,152,169,180,159,126,251,117,211,48,135,121,229,0 },
{ 70,218,145,153,227,48,102,13,142,245,21,161,53,165,28,111,201,145,17,118,182,103,2,158,125,173,0 },
{ 123,9,37,242,119,212,195,42,87,245,43,21,201,232,27,205,147,195,190,110,180,108,234,224,104,200,223,168,0 },
{ 180,192,40,238,216,251,37,156,130,224,193,226,173,42,125,222,96,239,86,110,48,50,182,179,31,216,152,145,173,41,0 } };

/* 纠错码字数表，与生成多项式表对应 */
const int pGenerPolyTable[] = { 7,10,13,15,16,17,18,20,22,24,26,28,30 };

/* 纠错码字数表个数 */
const int GenerTableSize = sizeof(pGenerPolyTable) / sizeof(int);

/* QR Reed Soloman Log Table for GF(256) */
const int Log[] = { 1,2,4,8,16,32,64,128,29,58,116,232,205,135,19,38,76,152,45,90,180,117,234,201,143,3,6,12,24,48,96,192,157,39,78,156,37,74,148,53,106,212,181,119,238,193,159,35,70,140,5,10,20,40,80,160,93,186,105,210,185,111,222,161,95,190,97,194,153,47,94,188,101,202,137,15,30,60,120,240,253,231,211,187,107,214,177,127,254,225,223,163,91,182,113,226,217,175,67,134,17,34,68,136,13,26,52,104,208,189,103,206,129,31,62,124,248,237,199,147,59,118,236,197,151,51,102,204,133,23,46,92,184,109,218,169,79,158,33,66,132,21,42,84,168,77,154,41,82,164,85,170,73,146,57,114,228,213,183,115,230,209,191,99,198,145,63,126,252,229,215,179,123,246,241,255,227,219,171,75,150,49,98,196,149,55,110,220,165,87,174,65,130,25,50,100,200,141,7,14,28,56,112,224,221,167,83,166,81,162,89,178,121,242,249,239,195,155,43,86,172,69,138,9,18,36,72,144,61,122,244,245,247,243,251,235,203,139,11,22,44,88,176,125,250,233,207,131,27,54,108,216,173,71,142,1 };

/* QR Reed Soloman AntiLog Table for GF(256) */
const int AntiLog[] = { 0,0,1,25,2,50,26,198,3,223,51,238,27,104,199,75,4,100,224,14,52,141,239,129,28,193,105,248,200,8,76,113,5,138,101,47,225,36,15,33,53,147,142,218,240,18,130,69,29,181,194,125,106,39,249,185,201,154,9,120,77,228,114,166,6,191,139,98,102,221,48,253,226,152,37,179,16,145,34,136,54,208,148,206,143,150,219,189,241,210,19,92,131,56,70,64,30,66,182,163,195,72,126,110,107,58,40,84,250,133,186,61,202,94,155,159,10,21,121,43,78,212,229,172,115,243,167,87,7,112,192,247,140,128,99,13,103,74,222,237,49,197,254,24,227,165,153,119,38,184,180,124,17,68,146,217,35,32,137,46,55,63,209,91,149,188,207,205,144,135,151,178,220,252,190,97,242,86,211,171,20,42,93,158,132,60,57,83,71,109,65,162,31,45,67,216,183,123,164,118,196,23,73,236,127,12,111,246,108,161,59,82,41,157,85,170,251,96,134,177,187,204,62,90,203,89,95,176,156,169,160,81,11,245,22,235,122,117,44,215,79,174,213,233,230,231,173,232,116,214,244,234,168,80,88,175 };

/*	*********************************
	函数功能：生成一块纠错码
	Mes：数据码首地址
	MesNum：一块数据码字节数
	result：纠错码结果首地址
	ErrCorCodeNum：纠错码字节数
*/
void GenerErrorCorCode(const unsigned char *Mes, int MesNum, unsigned char *result, int ErrCorCodeNum)
{
	int pGenPoly;
	for (pGenPoly = 0; pGenPoly < GenerTableSize&&pGenerPolyTable[pGenPoly] != ErrCorCodeNum; pGenPoly++)
		;
	if (pGenPoly >= GenerTableSize)
	{
		cout << "纠错码字数有误" << endl;
		return;
	}

	const int PolyNum = MesNum + ErrCorCodeNum;
	unsigned char *MesPoly = new unsigned char[PolyNum];//开辟内存
	unsigned char *GenPoly = new unsigned char[PolyNum];
	unsigned char *tem = new unsigned char[PolyNum];

	int i, j;
	for (i = 0; i < PolyNum; i++)
	{
		MesPoly[i] = (i < MesNum ? Mes[i] : '\0');
		GenPoly[i] = (i <= ErrCorCodeNum ? GenerPolyTable[pGenPoly][ErrCorCodeNum - i] : '\0');
	}
	
	unsigned char CurCeof;
	for (i = 0; i < MesNum; i++)
	{
		CurCeof = AntiLog[MesPoly[i]];
		for (j = 0; j <= ErrCorCodeNum; j++)
		{
			tem[j] = (GenPoly[j] + CurCeof) % 255;
			tem[j] = Log[tem[j]];
			MesPoly[i + j] ^= tem[j];
		}
	}

	for (j = 0; i < PolyNum; i++)
		result[j++] = MesPoly[i];

	delete MesPoly;//释放内存
	delete GenPoly;
	delete tem;

	return;
}